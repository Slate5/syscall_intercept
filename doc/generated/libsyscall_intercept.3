.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "libsyscall_intercept" "3" "syscall_intercept API version 0.1.0" "" "" ""
.nh \" Turn off hyphenation by default.
.\" Copyright 2016-2024, Intel Corporation
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in
.\"       the documentation and/or other materials provided with the
.\"       distribution.
.\"
.\"     * Neither the name of the copyright holder nor the names of its
.\"       contributors may be used to endorse or promote products derived
.\"       from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\" "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\" LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
.\" A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
.\" OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
.\" LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
.\" DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
.\" THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
.\" OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.SH NAME
\f[B]libsyscall_intercept\f[R] \[en] User space syscall intercepting
library
.SH SYNOPSIS
.IP
.EX
#include <libsyscall_intercept_hook_point.h>
.EE
.IP
.EX
cc \-lsyscall_intercept \-fpic \-shared source.c \-o preloadlib.so

LD_PRELOAD=preloadlib.so ./application
.EE
.SH DESCRIPTION
The system call intercepting library provides a low\-level interface for
hooking Linux system calls in user space.
This is achieved by hotpatching the machine code of the standard C
library in the memory of a process.
The user of this library can provide the functionality of almost any
syscall in user space, using the very simple API specified in the
libsyscall_intercept_hook_point.h header file:
.IP
.EX
int (*intercept_hook_point)(long syscall_number,
            long arg0, long arg1,
            long arg2, long arg3,
            long arg4, long arg5,
            long *result);
.EE
.PP
The user of the library shall assign to the variable called
intercept_hook_point a pointer to the address of a callback function.
A non\-zero return value returned by the callback function is used to
signal to the intercepting library that the specific system call was
ignored by the user and the original syscall should be executed.
A zero return value signals that the user takes over the system call.
In this case, the result of the system call (the value stored in the A0
register after the system call) can be set via the *result pointer.
In order to use the library, the intercepting code is expected to be
loaded using the LD_PRELOAD feature provided by the system loader.
.PP
All syscalls issued by glibc are intercepted.
Syscalls made by code outside glibc are not intercepted by default (see
INTERCEPT_ALL_OBJS below).
In order to be able to issue syscalls that are not intercepted, a
convenience function is provided by the library:
.IP
.EX
struct wrapper_ret syscall_no_intercept(long syscall_number, ...);
.EE
.PP
The struct \f[CR]wrapper_ret\f[R] is part of the RISC\-V version of this
library\[cq]s API:
.IP
.EX
struct wrapper_ret {
    int64_t a0;
    int64_t a1;
}
.EE
.PP
If A1 is modified by a syscall, this struct will preserve both return
values (A0 and A1).
.PP
In addition to hooking syscalls before they would be called, the API has
two special hook points that are executed after thread creation, right
after a clone syscall creating a thread returns:
.IP
.EX
void (*intercept_hook_point_clone_child)(void);
void (*intercept_hook_point_clone_parent)(long pid);
.EE
.PP
The parameter \f[CR]long pid\f[R] for the parent\[cq]s hook is a PID of
a newly created child thread.
.PD 0
.P
.PD
Using \f[CR]intercept_hook_point_clone_child\f[R] or
\f[CR]intercept_hook_point_clone_parent\f[R], one can be notified of
thread creations.
.PP
To make it easy to detect syscall return values indicating errors, one
can use the syscall_error_code function:
.IP
.EX
int syscall_error_code(long result);
.EE
.PP
When passed a return value from syscall_no_intercept, this function can
translate it to an error code equivalent to a glibc error code:
.IP
.EX
struct wrapper_ret ret;
ret = syscall_no_intercept(SYS_open, \[dq]file\[dq], O_RDWR);
int fd = (int)ret.a0;
if (syscall_error_code(fd) != 0)
    fprintf(stderr, strerror(syscall_error_code(fd)));
.EE
.SH ENVIRONMENT VARIABLES
Several environment variables control the operation of the library:
.PP
\f[I]INTERCEPT_LOG\f[R] \[en] When set, the library logs each
intercepted syscall to a file.
If the variable ends with \[lq]\-\[rq], the filename is suffixed with
the process ID.
E.g., for a process with PID 123 and INTERCEPT_LOG set to
\[lq]intercept.log\-\[rq], the resulting log file would be
\[lq]intercept.log\-123\[rq].
.PP
\f[I]INTERCEPT_LOG_TRUNC\f[R] \[en] When set to 0, the log file
specified by INTERCEPT_LOG is not truncated.
.PP
\f[I]INTERCEPT_HOOK_CMDLINE_FILTER\f[R] \[en] When set, the library
checks the command line used to start the program.
Hotpatching and syscall interception occur only if the last component of
the command matches the string provided in this variable.
This can also be queried by the user of the library:
.IP
.EX
int syscall_hook_in_process_allowed(void);
.EE
.PP
\f[I]INTERCEPT_ALL_OBJS\f[R] \[en] When set, all libraries are patched,
not just \f[I]glibc\f[R] and \f[I]pthread\f[R].
Note: The syscall_intercept library and Capstone are never patched.
.PP
\f[I]INTERCEPT_NO_TRAMPOLINE\f[R] \[en] When set, the trampoline is not
used for jumping from the patched library to the syscall_intercept
library.
In the RISC\-V version of this library, the trampoline size is less than
30 bytes, requiring only one page of memory when allocated with
\f[CR]mmap()\f[R].
Consequently, setting this variable does not significantly reduce memory
usage.
.PP
\f[I]INTERCEPT_DEBUG_DUMP\f[R] \[en] Enables verbose output.
.SH EXAMPLE
.IP
.EX
#include <libsyscall_intercept_hook_point.h>
#include <syscall.h>
#include <errno.h>

static int
hook(long syscall_number,
            long arg0, long arg1,
            long arg2, long arg3,
            long arg4, long arg5,
            long *result)
{
    if (syscall_number == SYS_getdents) {
        /*
         * Prevent the application from
         * using the getdents syscall. From
         * the point of view of the calling
         * process, it is as if the kernel
         * would return the ENOTSUP error
         * code from the syscall.
         */
        *result = \-ENOTSUP;
        return 0;
    } else {
        /*
         * Ignore any other syscalls
         * i.e.: pass them on to the kernel
         * as would normally happen.
         */
        return 1;
    }
}

static __attribute__((constructor)) void
init(void)
{
    // Set up the callback function
    intercept_hook_point = hook;
}
.EE
.IP
.EX
$ cc example.c \-lsyscall_intercept \-fpic \-shared \-o example.so
$ LD_LIBRARY_PATH=. LD_PRELOAD=example.so ls
ls: reading directory \[aq].\[aq]: Operation not supported
.EE
.SH SEE ALSO
\f[B]syscall\f[R](2)
